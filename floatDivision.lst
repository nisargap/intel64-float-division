     1                                  extern printf
     2                                  global main
     3                                  
     4                                  section .data
     5 00000000 0300000000000000          a: dq 3
     6 00000008 0A00000000000000          b: dq 10
     7                                  
     8 00000010 252E32660A00            fmt: db "%.2f",10,0
     9                                  
    10                                  section .bss
    11 00000000 <res 00000008>            c: resq 1
    12                                  
    13                                  section .text
    14                                  
    15                                    main:
    16                                  
    17                                    ; resetting all the registers because i'm paranoid
    18 00000000 B800000000                mov rax, 0
    19 00000005 BB00000000                mov rbx, 0
    20 0000000A B900000000                mov rcx, 0
    21 0000000F BA00000000                mov rdx, 0
    22                                  
    23                                    ; learn about FPU register at : https://en.wikibooks.org/wiki/X86_Assembly/Floating_Point#FPU_Register_Stack
    24 00000014 DD0425[00000000]          fld qword [a]           ; loads [a] into st0 register which is on the FPU stack
    25                                  
    26 0000001B DC3425[08000000]          fdiv qword [b]          ; divides st0 by [b] and stores result in st0
    27                                  
    28 00000022 DD1425[00000000]          fst qword [c]           ; stores the value of st0 into [c]
    29                                  
    30                                    ; printing float in 64 bit assembly: http://stackoverflow.com/questions/20594800/printf-float-in-nasm-assembly-64-bit
    31 00000029 4883EC08                  sub rsp, 8              ; make 8 bytes of space  in the stack
    32 0000002D F30F7E0425-               movq xmm0, qword [c]    ; moves to xmm0 register which are unique to 64 bit processors
    33 00000032 [00000000]         
    34 00000036 48BF-                     mov rdi, fmt            ; move the format string defined earlier to the stack
    35 00000038 [1000000000000000] 
    36 00000040 B801000000                mov rax, 1              ; move 1 to rax
    37 00000045 E8(00000000)              call printf
    38 0000004A 4883C408                  add rsp, 8
    39                                  
    40                                  
    41 0000004E B800000000                mov rax, 0
    42 00000053 C3                        ret
